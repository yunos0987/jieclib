(*
 * $ cd <JiecLib Project Root>
 * $ jiecc ./mersenne_twister/mersenne_twister.txt -I. -I./vendor/jiecunit/sys -o ./mersenne_twister/mersenne_twister.xml -t omron
 * or
 * $ jiecc ./mersenne_twister/mersenne_twister.txt -I. -I./vendor/jiecunit/sys -o ./mersenne_twister/mersenne_twister.xml -t keyence
 *)
{#ifndef __MERSENNE_TWISTER_TXT__}
{#define __MERSENNE_TWISTER_TXT__}

{#include <sys.txt>}

(*
 * Mersenne Twister POUs
 *
 * The Mersenne Twister, a method for generating pseudo-random numbers, is implemented here.
 *
 * This implementation generates uniform random numbers of either unsigned integer type
 * or floating-point type using the Mersenne Twister algorithm.
 * It initializes random number generation with a single integer,
 * but can also accommodate arbitrary bit-width values using an array if necessary.
 *
 * These POUs are the IEC 61131-3 ST language port from the following site (C language source).
 * http://www.math.sci.hiroshima-u.ac.jp/m-mat/MT/MT2002/CODES/mt19937ar.c
 * The external interface is modeled after the java.util.Random class of Java(TM) language.
 * https://docs.oracle.com/javase/jp/8/docs/api/java/util/Random.html
 *
 * e.g.
 * // Create an instance and initialize the random number generator with a bits value.
 * var mt: MersenneTwister_t; end_var
 * MersenneTwister_init(mt, dword#16#cafe_babe);
 * // Uniform random number of 32-bit unsigned integer type.
 * random_num := MersenneTwister_nextUDINT(mt);
 *)

{#include <sys_conv.txt>}

{#define N 624}
{#define M 397}
{#define N_1 623} // for a omron bug.
{#define M_1 396} // for a omron bug.
{#define MATRIX_A dword#16#9908b0df}   (* constant vector a *)
{#define UPPER_MASK dword#16#80000000} (* most significant w-r bits *)
{#define LOWER_MASK dword#16#7fffffff} (* least significant r bits *)

type
	MersenneTwister_t: struct
		mt: array[N] of dword;
		mti: dint;
	end_struct;
end_type

(**
 * Set the seed for the random number generator.
 * @param seed Set the seed for the random number generator using a single bits.
 *)
function MersenneTwister_init
	_PROLOGUE_OF_FUNCTION_()
	var_in_out self: MersenneTwister_t; end_var
	var_input
		seed: dword;
	end_var
	var_temp
		i: dint;
	end_var
	// {st}
	self.mt[0] := seed;
	for i := 1 to N - 1 by 1 do
		self.mt[i] := udint_to_dword(udint#1812433253 * dword_to_udint(self.mt[i - 1] xor shr(self.mt[i - 1], 30)) + dint_to_udint(i));
	end_for;
	self.mti := N;
	// {end}
end_function

(**
 * Set the seed for the random number generator.
 * @param seeds[] Set the seed for the random number generator using multiple bits.
 * @param seeds_length Set a length of the param seeds.
 *)
function MersenneTwister_initByArray
	_PROLOGUE_OF_FUNCTION_()
	var_in_out self: MersenneTwister_t; end_var
	var_in_out
		seeds: array[*] of dword;
	end_var
	var_input
		seeds_length: dint;
	end_var
	var_temp
		i, j, k: dint;
	end_var
	// {st}
	MersenneTwister_init(self, dword#19650218);
	i := 1;
	j := 0;
	if N > seeds_length then
		k := N;
	else
		k := seeds_length;
	end_if;
	for k := k to 1 by -1 do
		self.mt[i] := udint_to_dword(
			dword_to_udint(self.mt[i] xor udint_to_dword(dword_to_udint(self.mt[i - 1] xor shr(self.mt[i - 1], 30)) * udint#1664525))
			+ dword_to_udint(seeds[j]) + dint_to_udint(j));
		i := i + 1;
		j := j + 1;
		if i >= N then
			self.mt[0] := self.mt[N_1];
			i := 1;
		end_if;
		if j >= seeds_length then
			j := 0;
		end_if;
	end_for;
	for k := N - 1 to 1 by -1 do
		self.mt[i] := udint_to_dword(
			dword_to_udint(self.mt[i] xor udint_to_dword(dword_to_udint(self.mt[i - 1] xor shr(self.mt[i - 1], 30)) * udint#1566083941))
			- dint_to_udint(i));
		i := i + 1;
		if i >= N then
			self.mt[0] := self.mt[N_1];
			i := 1;
		end_if;
	end_for;

	self.mt[0] := dword#16#80000000;
	// {end}
end_function

(**
 * Generates a pseudo-random numbers.
 * @param bits The number of significant bits in the output value.; 0 < bits <= 32.
 * @return A pseudo-random number.
 *)
function MersenneTwister_next: dword
	_PROLOGUE_OF_FUNCTION_()
	var_in_out self: MersenneTwister_t; end_var
	var_input
		bits: dint := 32;
	end_var
	var_temp
		y: dword;
		kk: dint;
	end_var
	var_temp constant
		mag01: array[0..1] of dword := [dword#16#0, MATRIX_A];
	end_var
	// {st}
	if self.mti >= N then
		if self.mti = 625 then
			MersenneTwister_init(self, dword#5489);
		end_if;

		for kk := 0 to (N - 1) - M by 1 do
			y := (self.mt[kk] and UPPER_MASK) or (self.mt[kk + 1] and LOWER_MASK);
			self.mt[kk] := self.mt[kk + M] xor shr(y, 1) xor mag01[dword_to_dint(y and dword#16#1)];
		end_for;
		for kk := kk to (N - 1) - 1 by 1 do
			y := (self.mt[kk] and UPPER_MASK) or (self.mt[kk + 1] and LOWER_MASK);
			self.mt[kk] := self.mt[kk + M - N] xor shr(y, 1) xor mag01[dword_to_dint(y and dword#16#1)];
		end_for;
		y := (self.mt[N_1] and UPPER_MASK) or (self.mt[0] and LOWER_MASK);
		self.mt[N_1] := self.mt[M_1] xor shr(y, 1) xor mag01[dword_to_dint(y and dword#16#1)];
		self.mti := 0;
	end_if;

	y := self.mt[self.mti];
	self.mti := self.mti + 1;

	y := y xor shr(y, 11);
	y := y xor (shl(y,  7) and dword#16#9d2c5680);
	y := y xor (shl(y, 15) and dword#16#efc60000);
	y := y xor shr(y, 18);

	MersenneTwister_next := shr(y, 32 - bits);
	// {end}
end_function

(**
 * Generate a uniformly distributed boolean pseudo-random number.
 * @return true or false.
 *)
function MersenneTwister_nextBOOL: bool
	_PROLOGUE_OF_FUNCTION_()
	var_in_out self: MersenneTwister_t; end_var
	// {st}
	MersenneTwister_nextBOOL := MersenneTwister_next(self, 1) = dword#1;
	// {end}
end_function

(**
 * Generate a uniformly distributed unsigned 32-bit integer pseudo-random number.
 * @return An unsigned 32-bit integer pseudo-random number, between 0 and 4294967295.
 *)
function MersenneTwister_nextUDINT: udint
	_PROLOGUE_OF_FUNCTION_()
	var_in_out self: MersenneTwister_t; end_var
	// {st}
	MersenneTwister_nextUDINT := dword_to_udint(MersenneTwister_next(self, 32));
	// {end}
end_function

{#if not (_KEYENCE)}
(**
 * Generate a uniformly distributed unsigned 64-bit integer pseudo-random number.
 * @return An unsigned 64-bit integer pseudo-random number, between 0 and 18446744073709551615.
 *)
function MersenneTwister_nextULINT: ulint
	_PROLOGUE_OF_FUNCTION_()
	var_in_out self: MersenneTwister_t; end_var
	var_temp
		h, l: lword;
	end_var
	// {st}
	h := MersenneTwister_next(self, 32);
	l := MersenneTwister_next(self, 32);
	MersenneTwister_nextULINT := lword_to_ulint(shl(h, 32) or l);
	// {end}
end_function
{#endif}

(**
 * Generate a 32-bit floating-point pseudo-random number with uniform distribution in the range 0.0 to 1.0.
 * @return [0.0 1.0) of the half-open section.
 *)
function MersenneTwister_nextREAL: real
	_PROLOGUE_OF_FUNCTION_()
	var_in_out self: MersenneTwister_t; end_var
	// {st}
	MersenneTwister_nextREAL := lreal_to_real(
		udint_to_lreal(dword_to_udint(MersenneTwister_next(self, 32))) / lreal#4294967296.0); // 2^32
	// {end}
end_function

(**
 * Generate a 53-bit floating-point pseudo-random number with uniform distribution in the range 0.0 to 1.0.
 * @return [0.0 1.0) of the half-open section.
 *)
function MersenneTwister_nextLREAL: lreal
	_PROLOGUE_OF_FUNCTION_()
	var_in_out self: MersenneTwister_t; end_var
	var_temp
		a, b: lreal;
	end_var
	// {st}
	a := udint_to_lreal(dword_to_udint(MersenneTwister_next(self, 32 - 5)));
	b := udint_to_lreal(dword_to_udint(MersenneTwister_next(self, 32 - 6)));
	MersenneTwister_nextLREAL := (a * lreal#67108864.0 + b) / lreal#9007199254740992.0;
	// {end}
end_function

{#undef N}
{#undef M}
{#undef N_1}
{#undef M_1}
{#undef MATRIX_A}
{#undef UPPER_MASK}
{#undef LOWER_MASK}

{#endif}
