(*
 * $ cd <JiecLib Project Root>
 * $ jiecc ./string_lib/string_lib.txt -t omron -o ./string_lib/string_lib.xml
 *)

{#ifndef __STRING_LIB_TXT__}
{#define __STRING_LIB_TXT__}

{#define CHAR_MAX_BYTE 4}
{#define STRING_MAX_SIZE 1986} // OMRON's limit.
{#define STRING string[STRING_MAX_SIZE]}

function charAt: string[CHAR_MAX_BYTE + 1]
	var_input en: bool; end var_output eno: bool; end
	var_input
		self: STRING;
		p: dint := 1;
	end
	var_temp
		l: dint;
	end
	{st}
	l := uint_to_dint(len(self));
	if (1 <= p) and (p <= l) then
		charAt := mid(self, 1, dint_to_uint(p));
	else
		charAt := '';
	end_if;
	{end}
end

function asciiCharCodeAt: dint
	var_input en: bool; end var_output eno: bool; end
	var_input
		self: STRING;
		p: dint := 1;
	end
	var_temp
		c: string[CHAR_MAX_BYTE + 1];
		i: dint;
		ASCIIs: string[16#7f + 1] := (*'$00'*)
			'$01$02$03$04$05$06$07$08$09'
			'$0A$0B$0C$0D$0E$0F$10$11$12$13'
			'$14$15$16$17$18$19$1A$1B$1C$1D'
			'$1E$1F !"#$$%&$'()*+,-./0123456789:;<=>?'
			'@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_'
			'`abcdefghijklmnopqrstuvwxyz{|}~$7F' constant;
	end
	{st}
    // note: Poor performance. Should be optimize.
	c := charAt(self, p);
	for i := 1 to 127 by 1 do
		if c = charAt(ASCIIs, i) then
			asciiCharCodeAt := i;
			return;
		end_if;
	end_for;
	asciiCharCodeAt := -1;
	{end}
end

function fromAsciiCharCode: string[CHAR_MAX_BYTE + 1]
	{#define CODE0 16#00}
	{#define CODE1 16#7f}
	var_input en: bool; end var_output eno: bool; end
	var_input
		charcode: dint;
	end
	var_temp
		CODE2CHAR: array[CODE0..CODE1] of string[1 + 1] := [
			'$00', '$01', '$02', '$03', '$04', '$05', '$06', '$07', '$08', '$09', '$0A', '$0B', '$0C', '$0D', '$0E', '$0F',
			'$10', '$11', '$12', '$13', '$14', '$15', '$16', '$17', '$18', '$19', '$1A', '$1B', '$1C', '$1D', '$1E', '$1F',
			'$20', '$21', '$22', '$23', '$24', '$25', '$26', '$27', '$28', '$29', '$2A', '$2B', '$2C', '$2D', '$2E', '$2F',
			'$30', '$31', '$32', '$33', '$34', '$35', '$36', '$37', '$38', '$39', '$3A', '$3B', '$3C', '$3D', '$3E', '$3F',
			'$40', '$41', '$42', '$43', '$44', '$45', '$46', '$47', '$48', '$49', '$4A', '$4B', '$4C', '$4D', '$4E', '$4F',
			'$50', '$51', '$52', '$53', '$54', '$55', '$56', '$57', '$58', '$59', '$5A', '$5B', '$5C', '$5D', '$5E', '$5F',
			'$60', '$61', '$62', '$63', '$64', '$65', '$66', '$67', '$68', '$69', '$6A', '$6B', '$6C', '$6D', '$6E', '$6F',
			'$70', '$71', '$72', '$73', '$74', '$75', '$76', '$77', '$78', '$79', '$7A', '$7B', '$7C', '$7D', '$7E', '$7F',] constant;
	end
	{st}
	if (CODE0 <= charcode) and (charcode <= CODE1) then
		fromAsciiCharCode := CODE2CHAR[charcode];
	else
		eno := false;
		fromAsciiCharCode := '';
	end_if;
	{end}
	{#undef CODE0}
	{#undef CODE1}
end

function lower: STRING
	{#define CHARCODE_A 16#41}
	{#define CHARCODE_Z 16#5a}
	{#define DIFF_CHARCODE_U2L 16#20}
	var_input en: bool; end var_output eno: bool; end
	var_input
		self: STRING;
	end
	var_temp
		p, l: dint;
		c, d: string[CHAR_MAX_BYTE + 1];
		code: dint;
	end
	{st}
	lower := '';
	l := len(self);
	for p := 1 to l by 1 do
		c := charAt(self, p);
		code := asciiCharCodeAt(c, 1);
		if (CHARCODE_A <= code) and (code <= CHARCODE_Z) then
			d := fromAsciiCharCode(code + DIFF_CHARCODE_U2L);
			lower := concat(lower, d);
		else
			lower := concat(lower, c);
		end_if;
	end_for;
	{end}
	{#undef CHARCODE_A}
	{#undef CHARCODE_Z}
	{#undef DIFF_CHARCODE_U2L}
end
{#define toLowerCase lower}

function upper: STRING
	{#define CHARCODE_a 16#61}
	{#define CHARCODE_z 16#7a}
	{#define DIFF_CHARCODE_U2L 16#20}
	var_input en: bool; end var_output eno: bool; end
	var_input
		self: STRING;
	end
	var_temp
		p, l: dint;
		c, d: string[CHAR_MAX_BYTE + 1];
		code: dint;
	end
	{st}
	upper := '';
	l := len(self);
	for p := 1 to l by 1 do
		c := charAt(self, p);
		code := asciiCharCodeAt(c, 1);
		if (CHARCODE_a <= code) and (code <= CHARCODE_z) then
			d := fromAsciiCharCode(code - DIFF_CHARCODE_U2L);
			upper := concat(upper, d);
		else
			upper := concat(upper, c);
		end_if;
	end_for;
	{end}
	{#undef CHARCODE_a}
	{#undef CHARCODE_z}
	{#undef DIFF_CHARCODE_U2L}
end
{#define toUpperCase upper}

function remove: STRING
	var_input en: bool; end var_output eno: bool; end
	var_input
		{doc: 入力文字列}
		self: STRING;
		{doc: 削除文字列}
		del: STRING;
		{doc: 最大削除回数}
		count: dint := -1;
	end
	var_temp
		del_len: dint;
		c: dint;
		p, l: dint;
		h, t: STRING;
		r: STRING;
	end
	{st}
	del_len := len(del);
	t := self;
	l := len(t);
	c := count;
	while c <> 0 do
		p := find(t, del);
		if p = 0 then
			exit;
		end_if;
		// e.g. abcdef cd p=3 h=ab,cd,t=ef
		h := mid(t, dint_to_uint(p - 1), 1);
		l := l - (p + del_len) + 1;
		t := mid(t, dint_to_uint(l), dint_to_uint(p + del_len));
		r := concat(r, h);
		c := c - 1;
	end_while;
	remove := concat(r, t);
	{end}
end

function reverse: STRING
	var_input en: bool; end var_output eno: bool; end
	var_input
		self: STRING;
	end
	var_temp
		p: dint;
	end
	{st}
	reverse := '';
	for p := len(self) to 1 by -1 do
		reverse := concat(reverse, mid(self, 1, dint_to_uint(p)));
	end_for;
	{end}
end

function startswith: bool
	var_input en: bool; end var_output eno: bool; end
	var_input
		self: STRING;
		prefix: STRING;
	end
	var_temp
		m: dint;
	end
	{st}
	m := len(prefix);
	startswith := (uint_to_dint(len(self)) >= m) and (prefix = left(self, dint_to_uint(m)));
	{end}
end

function endswith: bool
	var_input en: bool; end var_output eno: bool; end
	var_input
		self: STRING;
		suffix: STRING;
	end
	var_temp
		m: dint;
	end
	{st}
	m := len(suffix);
	endswith := (uint_to_dint(len(self)) >= m) and (suffix = right(self, dint_to_uint(m)));
	{end}
end

function split: dint
	var_input en: bool; end var_output eno: bool; end
	var_input
		self: STRING;
		delimiter: STRING := '';
	end
	var_in_out
		out: array[*] of STRING;
	end
	var_temp
		rem: STRING;
		p: dint;
		l, m: dint;
		i0, i1, i: dint;
	end
	{st}
	i0 := lower_bound(out, 1);
	i1 := upper_bound(out, 1);
	l := len(self);
	m := len(delimiter);
	if m = 0 then
		for p := 1 to l by 1 do
			i := i0 + p - 1;
			if i > i1 then
				split := i1 - i0 + 1;
				return;
			end_if;
			out[i] := mid(self, 1, dint_to_uint(p));
		end_for;
		split := l;
		return;
	end_if;

	i := i0;
	rem := self;
	while true do
		if i > i1 then
			split := i1 - i0 + 1;
			return;
		end_if;
		p := find(rem, delimiter);
		if p <> 0 then
			out[i] := left(rem, dint_to_uint(p - 1));
			l := l - p - m + 1;
			rem := mid(rem, dint_to_uint(l), dint_to_uint(p + m));
			i := i + 1;
		else
			out[i] := rem;
			split := i - i0 + 1;
			return;
		end_if;
	end_while;
	{end}
end

function trim: STRING
	var_input en: bool; end var_output eno: bool; end
	var_input
		self: STRING;
	end
	var_temp
		WHITESPACES: array[4] of string[2] constant := [' ', '$t', '$r', '$n'];
		l, i0, i1: dint;
		i, j: dint;
		c: string[2];
		found: bool;
	end
	{st}
	l := len(self);
	if l = 0 then
		trim := '';
		return;
	end_if;
	i0 := 1;
	i1 := l;

	for i := 1 to l by 1 do
		c := mid(self, 1, dint_to_uint(i));
		found := false;
		for j := 0 to 3 by 1 do
			if c = WHITESPACES[j] then
				i0 := i + 1;
				found := true;
				exit;
			end_if;
		end_for;
		if not found then
			exit;
		end_if;
	end_for;

	if i0 > l then
		trim := '';
		return;
	end_if;

	for i := l to i0 by -1 do
		c := mid(self, 1, dint_to_uint(i));
		found := false;
		for j := 0 to 3 by 1 do
			if c = WHITESPACES[j] then
				i1 := i - 1;
				found := true;
				exit;
			end_if;
		end_for;
		if not found then
			exit;
		end_if;
	end_for;

	trim := mid(self, dint_to_uint(i1 - i0 + 1), dint_to_uint(i0));
	{end}
end

function ltrim: STRING
	var_input en: bool; end var_output eno: bool; end
	var_input
		self: STRING;
	end
	var_temp
		WHITESPACES: array[4] of string[2] constant := [' ', '$t', '$r', '$n'];
		l: dint;
		p: dint:= 1;
		i, j: dint;
		c: string[2];
		found: bool;
	end
	{st}
	l := len(self);
	if l = 0 then
		ltrim := '';
		return;
	end_if;

	for i := 1 to l by 1 do
		c := mid(self, 1, dint_to_uint(i));
		found := false;
		for j := 0 to 3 by 1 do
			if c = WHITESPACES[j] then
				p := i + 1;
				found := true;
				exit;
			end_if;
		end_for;
		if not found then
			exit;
		end_if;
	end_for;

	if p > l then
		ltrim := '';
		return;
	end_if;

	ltrim := mid(self, dint_to_uint(l - p + 1), dint_to_uint(p));
	{end}
end

function rtrim: STRING
	var_input en: bool; end var_output eno: bool; end
	var_input
		self: STRING;
	end
	var_temp
		WHITESPACES: array[4] of string[2] constant := [' ', '$t', '$r', '$n'];
		l, p: dint;
		i, j: dint;
		c: string[2];
		found: bool;
	end
	{st}
	l := len(self);
	if l = 0 then
		rtrim := '';
		return;
	end_if;
	p := l;

	for i := l to 1 by -1 do
		c := mid(self, 1, dint_to_uint(i));
		found := false;
		for j := 0 to 3 by 1 do
			if c = WHITESPACES[j] then
				p := i - 1;
				found := true;
				exit;
			end_if;
		end_for;
		if not found then
			exit;
		end_if;
	end_for;

	if p < 1 then
		rtrim := '';
		return;
	end_if;

	rtrim := mid(self, dint_to_uint(p), 1);
	{end}
end

function join: STRING
	var_input en: bool; end var_output eno: bool; end
	var_input
		self: STRING := '';
	end
	var_in_out
		a: array[*] of STRING;
	end
	var_temp
		i, i0, i1: dint;
	end
	{st}
	i0 := lower_bound(a, 1);
	i1 := upper_bound(a, 1);
	join := a[i0];
	for i := i0 + 1 to i1 by 1 do
		join := concat(join, self, a[i]);
	end_for;
	{end}
end

function substitute: STRING
	var_input en: bool; end var_output eno: bool; end
	var_input
		self: STRING; // 入力文字列
		old: STRING; // 置換前文字列
		new: STRING; // 置換後文字列
		count: dint := -1; // 最大置換回数
	end
	var_temp
		old_len: dint;
		c: dint;
		p, l: dint;
		h, t: STRING;
	end
	{st}
	substitute := '';
	old_len := len(old);
	t := self;
	l := len(t);
	c := count;
	while c <> 0 do
		p := find(t, old);
		if p = 0 then
			exit;
		end_if;
		// e.g. abcdef cd p=3 h=ab,cd,t=ef
		h := mid(t, dint_to_uint(p - 1), 1);
		l := l - (p + old_len) + 1;
		t := mid(t, dint_to_uint(l), dint_to_uint(p + old_len));
		substitute := concat(substitute, h, new);
		c := c - 1;
	end_while;
	substitute := concat(substitute, t);
	{end}
end

{#endif}
