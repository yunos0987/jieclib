(*
 * $ cd <JiecLib Project Root>
 * $ jiecc ./base64/base64.txt -Istring_lib -t omron -o ./base64/base64.xml
 *)

{#ifndef __BASE_64_TXT__}
{#define __BASE_64_TXT__}

{#include <string_lib.txt>}

{#define CHAR_MAX_BYTE 4}
{#define STRING_MAX_SIZE 1986} // OMRON's limit.
{#define STRING string[STRING_MAX_SIZE]}

function base64encode: STRING
	var_input en: bool; end var_output eno: bool; end
	var_in_out
		dat: array[*] of byte;
	end
	var_input
		offset: dint := 0;
		length: dint := -1;
	end
	var_temp
		B2C: array[64] of string[1 + 1] := [
			'A','B','C','D','E','F','G','H','I','J','K','L','M',
			'N','O','P','Q','R','S','T','U','V','W','X','Y','Z',
			'a','b','c','d','e','f','g','h','i','j','k','l','m',
			'n','o','p','q','r','s','t','u','v','w','x','y','z',
			'0','1','2','3','4','5','6','7','8','9','+','/'] constant;
		i0, i1, i: dint;
		startindex, endindex: dint;
		b1, b2, b3: byte;
	end
	{st}
	base64encode := '';
	if length = 0 then // ok
		return;
	end_if;
	i0 := lower_bound(dat, 1);
	i1 := upper_bound(dat, 1);
	startindex := i0 + offset;
	if length = -1 then
		endindex := i1;
	else
		endindex := startindex + length - 1;
	end_if;
	if (startindex < i0) or (endindex < startindex) or (endindex > i1) then
		eno := false;
		return;
	end_if;
	i := startindex;
	while i <= endindex do
		b1 := dat[i];
		i := i + 1;
		if i = endindex + 1 then
			base64encode := concat(base64encode, B2C[dword_to_udint(
				shr(b1, 2)
			)]);
			base64encode := concat(base64encode, B2C[dword_to_udint(
				shl(b1 and byte#16#03, 4)
			)]);
			base64encode := concat(base64encode, '==');
			return;
		end_if;
		b2 := dat[i];
		i := i + 1;
		if i = endindex + 1 then
			base64encode := concat(base64encode, B2C[dword_to_udint(
				shr(b1, 2)
			)]);
			base64encode := concat(base64encode, B2C[dword_to_udint(
				shl(b1 and byte#16#03, 4) or shr(b2 and byte#16#f0, 4)
			)]);
			base64encode := concat(base64encode, B2C[dword_to_udint(
				shl(b2 and byte#16#0f, 2)
			)]);
			base64encode := concat(base64encode, '=');
			return;
		end_if;
		b3 := dat[i];
		i := i + 1;
		base64encode := concat(base64encode, B2C[dword_to_udint(
			shr(b1, 2)
		)]);
		base64encode := concat(base64encode, B2C[dword_to_udint(
			shl(b1 and byte#16#03, 4) or shr(b2 and byte#16#f0, 4)
		)]);
		base64encode := concat(base64encode, B2C[dword_to_udint(
			shl(b2 and byte#16#0f, 2) or shr(b3 and byte#16#c0, 6)
		)]);
		base64encode := concat(base64encode, B2C[dword_to_udint(
			b3 and byte#16#3f
		)]);
	end_while;
	{end}
end

(**
 * @return number of data size.
 *)
function base64decode: dint
	var_input en: bool; end var_output eno: bool; end
	var_input
		txt: STRING (*{doc: input base64 text.}*);
	end
	var_input
		offset: dint := 0;
	end
	var_in_out
		dat: array[*] of byte;
	end
	var_temp
		C2B: array[128] of byte constant := [
			byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255,
			byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255,
			byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255, byte# 62, byte#255, byte#255, byte#255, byte# 63,
			byte# 52, byte# 53, byte# 54, byte# 55, byte# 56, byte# 57, byte# 58, byte# 59, byte# 60, byte# 61, byte#255, byte#255, byte#255, byte#255, byte#255, byte#255,
			byte#255, byte#  0, byte#  1, byte#  2, byte#  3, byte#  4, byte#  5, byte#  6, byte#  7, byte#  8, byte#  9, byte# 10, byte# 11, byte# 12, byte# 13, byte# 14,
			byte# 15, byte# 16, byte# 17, byte# 18, byte# 19, byte# 20, byte# 21, byte# 22, byte# 23, byte# 24, byte# 25, byte#255, byte#255, byte#255, byte#255, byte#255,
			byte#255, byte# 26, byte# 27, byte# 28, byte# 29, byte# 30, byte# 31, byte# 32, byte# 33, byte# 34, byte# 35, byte# 36, byte# 37, byte# 38, byte# 39, byte# 40,
			byte# 41, byte# 42, byte# 43, byte# 44, byte# 45, byte# 46, byte# 47, byte# 48, byte# 49, byte# 50, byte# 51, byte#255, byte#255, byte#255, byte#255, byte#255,];
		b1, b2, b3, b4: byte;
		p, l: dint;
		o: dint;
		i0, i1, i: dint;
	end
	{st}
	l := len(txt);
	p := 1;
	o := offset;
	while p <= l do
		// b1
		repeat
			b1 := C2B[asciiCharCodeAt(txt, p)];
			p := p + 1;
			until (p > l) or (b1 <> byte#255)
		end_repeat;
		if b1 = byte#255 then
			exit;
		end_if;
		// b2
		repeat
			b2 := C2B[asciiCharCodeAt(txt, p)];
			p := p + 1;
			until (p > l) or (b2 <> byte#255)
		end_repeat;
		if b2 = byte#255 then
			exit;
		end_if;
		dat[o] := dword_to_byte(byte_to_dword(shl(b1, 2)) or shr(b2 and byte#16#30, 4));
		o := o + 1;
		// b3
		repeat
			b3 := dint_to_byte(asciiCharCodeAt(txt, p));
			p := p + 1;
			if b3 = byte#61 then
				base64decode := o - offset;
				return;
			end_if;
			b3 := C2B[byte_to_usint(b3)];
			until (p > l) or (b3 <> byte#255)
		end_repeat;
		if b3 = byte#255 then
			exit;
		end_if;
		dat[o] := dword_to_byte(shl(b2 and byte#16#0f, 4) or shr(b3 and byte#16#3c, 2));
		o := o + 1;
		// b4
		repeat
			b4 := dint_to_byte(asciiCharCodeAt(txt, p));
			p := p + 1;
			if b4 = byte#61 then
				base64decode := o - offset;
				return;
			end_if;
			b4 := C2B[byte_to_usint(b4)];
			until (p > l) or (b4 <> byte#255)
		end_repeat;
		if b4 = byte#255 then
			exit;
		end_if;
		dat[o] := dword_to_byte(shl(b3 and byte#16#03, 6) or byte_to_dword(b4));
		o := o + 1;
	end_while;
	base64decode := o - offset;
	{end}
end

{#endif}
